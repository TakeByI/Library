/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.libraryproject;

import java.sql.*;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

public class JFrameCheckBook extends javax.swing.JFrame {

    public JFrameCheckBook() {
        initComponents();
        this.setTitle("Проверить наличие книги"); //Название на верху формы
        try {
            Class.forName("org.postgresql.Driver");
            String conToDb = "jdbc:postgresql://localhost:5432/libraryproject";
            connection = (Connection)DriverManager.getConnection(conToDb, "postgres", "qwerty1234");
            connection.setAutoCommit(true);
            statement = (Statement) connection.createStatement();
            statement2 = (Statement) connection.createStatement();
            statement3 = (Statement) connection.createStatement();
            
            System.out.println("success");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(JFrameCheckBook.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(JFrameCheckBook.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldBookName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButtonBringTo = new javax.swing.JButton();
        jLabelResult = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListBookSUser = new javax.swing.JList<>();
        jLabelAllCount = new javax.swing.JLabel();
        jLabelCount = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboBoxFindBook = new javax.swing.JComboBox<>();
        jButtonCheck = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Введите название книги");

        jButtonBringTo.setText("Вывести информацию");
        jButtonBringTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBringToActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jListBookSUser);

        jLabelAllCount.setText("Всего в библиотеке: 0");

        jLabelCount.setText("В наличии: 0");

        jLabel4.setText("Находятся у:");

        jButtonCheck.setText("Поиск");
        jButtonCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCheckActionPerformed(evt);
            }
        });

        jLabel2.setText("Найдено:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelAllCount)
                            .addComponent(jLabelCount))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                                .addComponent(jLabelResult, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel1)
                                    .addComponent(jTextFieldBookName, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jComboBoxFindBook, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(37, 37, 37)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButtonCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonBringTo))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldBookName, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonBringTo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxFindBook, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelAllCount)
                        .addGap(10, 10, 10)
                        .addComponent(jLabelCount))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelResult, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonBringToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBringToActionPerformed
        try {
            jLabelAllCount.setText("Всего в библиотеке: ");
            jLabelCount.setText("В наличии: ");

            String lineForDelete = jComboBoxFindBook.getSelectedItem().toString();
            StringTokenizer strTokenizer = new StringTokenizer(lineForDelete, ".");
            String a = strTokenizer.nextToken();
            
            //подсчет количества книг с конкретным названием
            //сколько таких книг зарегистрировано в библиотеке всего
            resultSet = statement.executeQuery("SELECT book_in_lib FROM booklist WHERE book_name = '" + jComboBoxFindBook.getSelectedItem().toString() + "'");
            while (resultSet.next()) {
                resultSet.getBoolean("book_in_lib");
                count++;
            }
            jLabelAllCount.setText("Всего в библиотеке: " + count);
            count = 0;
            
            //сколько таких книг в библиотеке в наличии
            resultSet = statement.executeQuery("SELECT book_in_lib FROM booklist WHERE book_name = '" + jComboBoxFindBook.getSelectedItem().toString() + "' AND book_in_lib = true");
            while (resultSet.next()) {
                resultSet.getBoolean("book_in_lib");
                count++;
            }
            jLabelCount.setText("В наличии: " + count);
            count = 0;
            
            defList = new DefaultListModel();
            resultSet = statement.executeQuery("SELECT user_name, user_id FROM userlist WHERE user_id IN (SELECT fk_user_id "
                    + "FROM uoblist WHERE fk_book_id IN (SELECT book_id "
                    + "FROM booklist WHERE book_name = '" + jComboBoxFindBook.getSelectedItem().toString() + "'))");// SELECT возвращает имя и айди человека, имеющего такую книгу
            //делаем несколько вложенных циклов и создаем там новый ResultSet, так как нам необходимо создать новые запросы, до получения всех данных из предыдущего запроса
            while (resultSet.next()) {
                strForOut = resultSet.getString("user_name");
                intForOut = resultSet.getInt("user_id");
                resultSetTest = statement2.executeQuery("SELECT * FROM uoblist WHERE fk_user_id = " + intForOut); //SELECT возвращает строки из таблицы со взятым книгами и людьми, где user_id - конкретное значение, которое было получено до
                while (resultSetTest.next()) { 
                    resultSetTest3 = statement3.executeQuery("SELECT book_name FROM booklist WHERE book_id = " + resultSetTest.getInt("fk_book_id"));
                    while (resultSetTest3.next()) {
                        if (resultSetTest3.getString("book_name").equals(jComboBoxFindBook.getSelectedItem().toString())) {
                            count++;
                        }
                    }
                }
                defList.addElement(intForOut + "." + strForOut + " " + count + " шт.");//добавление в лист элементов, один элемент - человек и количество конкретных книг, взятых им
                count = 0;
            }
            jListBookSUser.setModel(defList);
        } catch (SQLException ex) {
            Logger.getLogger(JFrameCheckBook.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonBringToActionPerformed

    private void jButtonCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCheckActionPerformed
        //действия, выполняющиеся для поиска книги
        jComboBoxFindBook.removeAllItems();
        wordsForSearch = jTextFieldBookName.getText().toLowerCase();
        try {
            if (!"".equals(jTextFieldBookName.getText())) {
            resultSet = statement.executeQuery("SELECT book_name FROM booklist"); //выбираем все книги, а после ищем подстроку
            while (resultSet.next()) {
                bookName = resultSet.getString("book_name");
                copyBookNameWithoutChanges = bookName;
                bookName = bookName.toLowerCase();
                //System.out.println(bookName);
                for (int i = 0; i < bookName.length(); i++) { // цикл, ищущий подстроку
                    int j = 0;
                    while (j < wordsForSearch.length() && (i + j) < bookName.length() && wordsForSearch.charAt(j) == bookName.charAt(i + j)) {
                        j++;
                    }
                    if (j == wordsForSearch.length()) {
                        int schet = 0; //переменная для фиксирования существующего значения в списке
                        for (int g = 0; g < jComboBoxFindBook.getItemCount(); g++) {
                            if (copyBookNameWithoutChanges.equals(jComboBoxFindBook.getItemAt(g))) {
                                schet = 1;
                                break;
                            }
                        }
                        if (schet == 0) {
                            jComboBoxFindBook.addItem(copyBookNameWithoutChanges);
                            break;
                        }
                    }
                }
            }
            }
        } catch (SQLException ex) {
            Logger.getLogger(JFrameCheckBook.class.getName()).log(Level.SEVERE, null, ex);
        }
            
            
    }//GEN-LAST:event_jButtonCheckActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameCheckBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameCheckBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameCheckBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameCheckBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameCheckBook().setVisible(true);
            }
        });
    }
    int count = 0;//переменная для подсчета количества конкретных книг у конкретного человека
    String strForOut = "";//переменная для вывода в лист
    int intForOut = 0;//переменная для вывода в лист
    
    DefaultListModel defList = null;// класс, используемый ждя заполнения листа данными
    
    //переменные для поиска нужной книжки
    String bookName = "";//в эту переменную записываются значения книг для поиска по введенной строке
    String copyBookNameWithoutChanges = "";//не измененная копия bookName для вывода на экран
    String wordsForSearch = "";//введенная строка по которой происходит поиск книг
    
    //подключения к БД
    Connection connection = null;
    Statement statement = null;
    Statement statement2 = null;
    Statement statement3 = null;
    ResultSet resultSet = null;
    ResultSet resultSetTest = null;
    ResultSet resultSetTest3 = null;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBringTo;
    private javax.swing.JButton jButtonCheck;
    private javax.swing.JComboBox<String> jComboBoxFindBook;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelAllCount;
    private javax.swing.JLabel jLabelCount;
    private javax.swing.JLabel jLabelResult;
    private javax.swing.JList<String> jListBookSUser;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldBookName;
    // End of variables declaration//GEN-END:variables
}
