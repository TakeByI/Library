/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.libraryproject;
import java.sql.*;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;

public class MainJFrame extends javax.swing.JFrame {

    
    public MainJFrame() {
        initComponents();
        this.setTitle("Библиотека"); //Название на верху формы
        try {
            Class.forName("org.postgresql.Driver");
            String conToDb = "jdbc:postgresql://localhost:5432/libraryproject";
            connection1 = (Connection)DriverManager.getConnection(conToDb, "postgres", "qwerty1234");
            connection1.setAutoCommit(true);
            statement = (Statement) connection1.createStatement();
            System.out.println("success"); //выводится при успешном подключении к БД (сработали предыдущие строчки кода с подкл. к БД)

            //заполнение комбобокса, выводящего список людей, из БД
            rsUserList = statement.executeQuery("SELECT user_id, user_name FROM userlist ORDER BY user_id");
            while (rsUserList.next()) {
                //System.out.println(rsUserList.getInt("user_id") + ". " + rsUserList.getString("user_name"));
                jComboBoxUserList.addItem(rsUserList.getInt("user_id") + ". " + rsUserList.getString("user_name"));
            }
            
            //заполнение комбобокса, выводящего список книг, из БД
            rsBookList = statement.executeQuery("SELECT book_id, book_name FROM booklist ORDER BY book_id");
            while (rsBookList.next()) {
                jComboBoxBookList.addItem(rsBookList.getInt("book_id") + ". " + rsBookList.getString("book_name"));
            }
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonTurnBook = new javax.swing.JButton();
        jComboBoxBookList = new javax.swing.JComboBox<>();
        jTextFieldAddBook = new javax.swing.JTextField();
        jLabelAddBook = new javax.swing.JLabel();
        jButtonAddBook = new javax.swing.JButton();
        jLabelBookList = new javax.swing.JLabel();
        jLabelUserList = new javax.swing.JLabel();
        jComboBoxUserList = new javax.swing.JComboBox<>();
        jTextFieldAddUser = new javax.swing.JTextField();
        jLabelAddUser = new javax.swing.JLabel();
        jButtonAddUser = new javax.swing.JButton();
        jButtonUpdate = new javax.swing.JButton();
        jButtonDeleteBook = new javax.swing.JButton();
        jButtonDeleteUser = new javax.swing.JButton();
        jButtonTakeBook = new javax.swing.JButton();
        jButtonCheckBook = new javax.swing.JButton();
        jLabelBookAvailability = new javax.swing.JLabel();
        jLabelUserAvailability = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jButtonTurnBook.setText("Сдать книгу");
        jButtonTurnBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTurnBookActionPerformed(evt);
            }
        });

        jComboBoxBookList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxBookListActionPerformed(evt);
            }
        });

        jTextFieldAddBook.setPreferredSize(new java.awt.Dimension(64, 22));
        jTextFieldAddBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldAddBookActionPerformed(evt);
            }
        });

        jLabelAddBook.setFont(new java.awt.Font("Artifakt Element Black", 0, 16)); // NOI18N
        jLabelAddBook.setText("Добавление книги");

        jButtonAddBook.setText("Добавить");
        jButtonAddBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddBookActionPerformed(evt);
            }
        });

        jLabelBookList.setFont(new java.awt.Font("Artifakt Element Black", 0, 16)); // NOI18N
        jLabelBookList.setText("Список книг");

        jLabelUserList.setFont(new java.awt.Font("Artifakt Element Black", 0, 16)); // NOI18N
        jLabelUserList.setText("Список читателей");

        jComboBoxUserList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxUserListActionPerformed(evt);
            }
        });

        jTextFieldAddUser.setPreferredSize(new java.awt.Dimension(64, 22));

        jLabelAddUser.setFont(new java.awt.Font("Artifakt Element Black", 0, 16)); // NOI18N
        jLabelAddUser.setText("Добавление читателей");

        jButtonAddUser.setText("Добавить");
        jButtonAddUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddUserActionPerformed(evt);
            }
        });

        jButtonUpdate.setText("Обновить");
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });

        jButtonDeleteBook.setText("Удалить выбранную книгу");
        jButtonDeleteBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteBookActionPerformed(evt);
            }
        });

        jButtonDeleteUser.setText("Удалить выбранного читателя");
        jButtonDeleteUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteUserActionPerformed(evt);
            }
        });

        jButtonTakeBook.setText("Взять книгу");
        jButtonTakeBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTakeBookActionPerformed(evt);
            }
        });

        jButtonCheckBook.setText("Проверить наличие книги");
        jButtonCheckBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCheckBookActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonUpdate)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelBookList, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxBookList, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxUserList, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelUserList, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(103, 103, 103)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelAddBook, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(687, 687, 687))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelAddUser, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(687, 687, 687))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldAddBook, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldAddUser, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButtonAddUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonAddBook, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(68, 68, 68)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabelBookAvailability, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonDeleteBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonDeleteUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelUserAvailability, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonTurnBook, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonTakeBook, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonCheckBook, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(718, 718, 718)))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelAddBook, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelBookList, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonAddBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldAddBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxBookList)
                    .addComponent(jButtonDeleteBook, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jLabelBookAvailability, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelUserList, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBoxUserList, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelAddUser, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldAddUser, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonAddUser, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonDeleteUser, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(53, 53, 53)
                .addComponent(jLabelUserAvailability, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonTurnBook, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonTakeBook, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCheckBook, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(262, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonTurnBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTurnBookActionPerformed
        //создание формы для сдачи книг и показ книг взятых конкретным человеком по нажатию кнопки
        JFrameBookUser jFrameBookUser = new JFrameBookUser();
        jFrameBookUser.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        jFrameBookUser.pack();
        jFrameBookUser.setVisible(true);
        jFrameBookUser.setResizable(false); //запрещает изменение размера окна
    }//GEN-LAST:event_jButtonTurnBookActionPerformed

    private void jComboBoxBookListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxBookListActionPerformed
        
    }//GEN-LAST:event_jComboBoxBookListActionPerformed

    private void jComboBoxUserListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxUserListActionPerformed
        
    }//GEN-LAST:event_jComboBoxUserListActionPerformed

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        try {
            //кнопка в правом верхнем углу выполняющая функцию обновления комбобоксов с информацией(книги, люди)
            updateInfo(jComboBoxBookList, rsBookList, statement, "SELECT book_id, book_name FROM booklist ORDER BY book_id", "book_id", "book_name");
            updateInfo(jComboBoxUserList, rsUserList, statement, "SELECT user_id, user_name FROM userlist ORDER BY user_id", "user_id", "user_name");
        } catch (SQLException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void jButtonDeleteBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteBookActionPerformed
        //удаление из таблицы с книгами конкретной книги
        jLabelBookAvailability.setText("");
        lineForDelete = jComboBoxBookList.getSelectedItem().toString();
        strTokenizerDelete = new StringTokenizer(lineForDelete, ".");
        idDelete = strTokenizerDelete.nextToken();
        try {
            statement.executeUpdate("DELETE FROM booklist WHERE book_id = " + idDelete); //удаление из таблицы с книгами конкретной книги
            updateInfo(jComboBoxBookList, rsBookList, statement, "SELECT book_id, book_name FROM booklist ORDER BY book_id", "book_id", "book_name");
        } catch (SQLException ex) {
            jLabelBookAvailability.setText("Невозможно удалить! Эта книга находится не в библиотеке!");
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButtonDeleteBookActionPerformed

    private void jButtonDeleteUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteUserActionPerformed
        //удаление из таблицы с людьми конкретного человека
        jLabelUserAvailability.setText("");
        lineForDelete = jComboBoxUserList.getSelectedItem().toString();
        strTokenizerDelete = new StringTokenizer(lineForDelete, ".");
        idDelete = strTokenizerDelete.nextToken();
        try {
            statement.executeUpdate("DELETE FROM userlist WHERE user_id = " + idDelete); //удаление из таблицы с людьми конкретного человека
            updateInfo(jComboBoxUserList, rsUserList, statement, "SELECT user_id, user_name FROM userlist ORDER BY user_id", "user_id", "user_name");
        } catch (SQLException ex) {
            jLabelUserAvailability.setText("Невозможно удалить! Проверьте наличие книг у человека!");
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonDeleteUserActionPerformed

    private void jButtonAddBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddBookActionPerformed
        //добавление книги в таблицу с книгами
        if (!(jTextFieldAddBook.getText().equals(""))) {
            try {
                statement.executeUpdate("INSERT INTO booklist(book_name, book_in_lib) "
                        + "VALUES ('" + jTextFieldAddBook.getText() + "', true)"); //INSERT в таблицу с книгами добавляющий новую книгу
                jTextFieldAddBook.setText("");
                updateInfo(jComboBoxBookList, rsBookList, statement, "SELECT book_id, book_name FROM booklist ORDER BY book_id", "book_id", "book_name");
            } catch (SQLException ex) {
                
                Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                
            }
        }
    }//GEN-LAST:event_jButtonAddBookActionPerformed

    private void jTextFieldAddBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldAddBookActionPerformed
        
    }//GEN-LAST:event_jTextFieldAddBookActionPerformed

    private void jButtonAddUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddUserActionPerformed
        //добавление человека в таблицу с людьми
        if (!(jTextFieldAddUser.getText().equals(""))) {
            try {
                statement.executeUpdate("INSERT INTO userlist(user_name, num_of_book) "
                        + "VALUES ('" + jTextFieldAddUser.getText() + "', 0)");//INSERT в таблицу с книгами добавляющий новую книгу
                jTextFieldAddUser.setText("");
                updateInfo(jComboBoxUserList, rsUserList, statement, "SELECT user_id, user_name FROM userlist ORDER BY user_id", "user_id", "user_name");
            } catch (SQLException ex) {
                Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButtonAddUserActionPerformed

    private void jButtonTakeBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTakeBookActionPerformed
        //создание формы для взятия любой из доступных книг конкретным человеком
        JFrameTakeBook jFrameTakeBook = new JFrameTakeBook();
        jFrameTakeBook.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        jFrameTakeBook.pack();
        jFrameTakeBook.setVisible(true);
        jFrameTakeBook.setResizable(false);
    }//GEN-LAST:event_jButtonTakeBookActionPerformed

    private void jButtonCheckBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCheckBookActionPerformed
        //создание формы для взятия любой из доступных книг конкретным человеком
        JFrameCheckBook jFrameCheckBook = new JFrameCheckBook();
        jFrameCheckBook.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        jFrameCheckBook.pack();
        jFrameCheckBook.setVisible(true);
        jFrameCheckBook.setResizable(false);
    }//GEN-LAST:event_jButtonCheckBookActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        //закрытие подключений к БД
        try {
            connection1.close();
            statement.close();
            rsUserList.close();
            rsBookList.close();
        } catch (SQLException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
        
    }
    
    /** Этот метод предназначен для обновления ComboBox с информацией, взятой из базы данных.
    Обновление происходит посредством запроса всей необходимой информации из БД.
    @param a ComboBox, в который мы заносим информацию
    @param b ResultSet, осуществляющий получение информации из БД
    @param с Statement
    @param d Select запрос в БД
    @param e Первый столбец в таблице - id
    @param f Второй столбец в таблице - name
    */
    public void updateInfo(JComboBox a, ResultSet b, Statement c, String d, String e, String f) throws SQLException {
        a.removeAllItems();
        b = c.executeQuery(d);
        while (b.next()) {
            a.addItem(b.getInt(e) + ". " + b.getString(f));
        }
    }
    
    Connection connection1 = null; 
    Statement statement = null;
    ResultSet rsUserList = null;
    ResultSet rsBookList = null;
    
    StringTokenizer strTokenizerDelete = null; //класс для разделения строки
    
    String idDelete = ""; //переменная для айди книги или человека, с помощью этой переменной делаем запрос в БД для удаления книги или человека из соответствующей таблицы
    String lineForDelete = "";//переменная для строки, которую мы разделяем на части с помощью StringTokenizer
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddBook;
    private javax.swing.JButton jButtonAddUser;
    private javax.swing.JButton jButtonCheckBook;
    private javax.swing.JButton jButtonDeleteBook;
    private javax.swing.JButton jButtonDeleteUser;
    private javax.swing.JButton jButtonTakeBook;
    private javax.swing.JButton jButtonTurnBook;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JComboBox<String> jComboBoxBookList;
    private javax.swing.JComboBox<String> jComboBoxUserList;
    private javax.swing.JLabel jLabelAddBook;
    private javax.swing.JLabel jLabelAddUser;
    private javax.swing.JLabel jLabelBookAvailability;
    private javax.swing.JLabel jLabelBookList;
    private javax.swing.JLabel jLabelUserAvailability;
    private javax.swing.JLabel jLabelUserList;
    private javax.swing.JTextField jTextFieldAddBook;
    private javax.swing.JTextField jTextFieldAddUser;
    // End of variables declaration//GEN-END:variables
}
